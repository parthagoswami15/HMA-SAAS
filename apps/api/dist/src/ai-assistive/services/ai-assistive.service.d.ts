import { PrismaService } from '../../prisma/prisma.service';
import { TriageSuggestionDto, TriageResultDto, CodingSuggestionDto, CodingResultDto, DenialPredictionDto, DenialPredictionResultDto, BedDemandForecastDto, OTDemandForecastDto, InventoryForecastDto, ForecastResultDto, DoctorDictationDto, ExtractedNoteDto, AIApprovalRequestDto, AIApprovalResultDto, AIGuardrailDto, TrainingDataDto, ModelEvaluationDto, AIModelDto } from '../dto/ai-assistive.dto';
export declare class AIAssistiveService {
    private prisma;
    constructor(prisma: PrismaService);
    getTriageSuggestion(triageDto: TriageSuggestionDto): Promise<TriageResultDto>;
    getCodingSuggestion(codingDto: CodingSuggestionDto): Promise<CodingResultDto>;
    predictDenial(denialDto: DenialPredictionDto): Promise<DenialPredictionResultDto>;
    forecastBedDemand(forecastDto: BedDemandForecastDto): Promise<ForecastResultDto>;
    forecastOTDemand(forecastDto: OTDemandForecastDto): Promise<ForecastResultDto>;
    forecastInventory(forecastDto: InventoryForecastDto): Promise<ForecastResultDto>;
    extractFromDictation(dictationDto: DoctorDictationDto): Promise<ExtractedNoteDto>;
    requestApproval(approvalDto: AIApprovalRequestDto): Promise<AIApprovalResultDto>;
    getGuardrails(): Promise<AIGuardrailDto[]>;
    trainModel(trainingData: TrainingDataDto): Promise<any>;
    evaluateModel(evaluationDto: ModelEvaluationDto): Promise<any>;
    getAIModels(): Promise<AIModelDto[]>;
    getModelPerformance(modelName: string): Promise<any>;
    updateGuardrail(guardrailId: string, guardrailDto: AIGuardrailDto): Promise<any>;
    getApprovalHistory(userId?: string): Promise<any[]>;
    getTriageAnalytics(): Promise<any>;
    getCodingAnalytics(): Promise<any>;
    private calculateTriageLevel;
    private calculateConfidence;
    private getRecommendedActions;
    private getSuggestedDepartment;
    private calculateWaitTime;
    private identifyRiskFactors;
    private generateExplanation;
    private suggestICDCodes;
    private suggestCPTCodes;
    private suggestHCPCSCodes;
    private calculateCharges;
    private calculateCodingConfidence;
    private getCodingWarnings;
    private calculateDenialProbability;
    private assessPredictionConfidence;
    private predictDenialReasons;
    private suggestClaimCorrections;
    private identifyClaimRiskFactors;
    private calculateExpectedApproval;
    private generateForecastData;
    private generateOTForecastData;
    private generateInventoryForecastData;
    private generateBedRecommendations;
    private generateOTRecommendations;
    private generateInventoryRecommendations;
    private simulateTextExtraction;
    private extractStructuredData;
    private calculateExtractionConfidence;
    private suggestEMRFields;
    private validateExtractedData;
    private evaluateApprovalRequest;
    private calculateApprovalConfidence;
    private determineApprover;
    private generateApprovalComments;
    private suggestModifications;
    private calculateTriageAccuracy;
    private getDepartmentDistribution;
    private getCommonComplaints;
    private getCommonCodingCorrections;
    private getTrainingHistory;
    private simulateModelTraining;
}
