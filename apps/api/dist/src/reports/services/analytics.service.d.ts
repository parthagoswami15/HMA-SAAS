import { Repository } from 'typeorm';
import { FactBilling, FactVisits, FactLabs } from '../entities/facts.entity';
import { DimDate, DimFacility, DimProvider, DimService, DimPayer } from '../entities/dimensions.entity';
import { FinancialReportDto, RevenueAnalysisDto, GSTReportDto, AgingAnalysisDto, CaseMixDto, InfectionRateDto, ReadmissionDto, TATDto, OccupancyDto, LOSDto, BedTurnoverDto, PharmacyExpiryDto, PatientAcquisitionDto, PatientRetentionDto, NPSDto, ReferralAnalysisDto } from '../dto/reports.dto';
export declare class AnalyticsService {
    private readonly factBillingRepo;
    private readonly factVisitsRepo;
    private readonly factLabsRepo;
    private readonly dimDateRepo;
    private readonly dimFacilityRepo;
    private readonly dimProviderRepo;
    private readonly dimServiceRepo;
    private readonly dimPayerRepo;
    private readonly logger;
    constructor(factBillingRepo: Repository<FactBilling>, factVisitsRepo: Repository<FactVisits>, factLabsRepo: Repository<FactLabs>, dimDateRepo: Repository<DimDate>, dimFacilityRepo: Repository<DimFacility>, dimProviderRepo: Repository<DimProvider>, dimServiceRepo: Repository<DimService>, dimPayerRepo: Repository<DimPayer>);
    getDailyCollections(tenantId: string, filters: FinancialReportDto): Promise<any>;
    getRevenueAnalysis(tenantId: string, filters: RevenueAnalysisDto): Promise<any>;
    getGSTReport(tenantId: string, filters: GSTReportDto): Promise<any>;
    getAgingAnalysis(tenantId: string, filters: AgingAnalysisDto): Promise<any>;
    getCaseMixAnalysis(tenantId: string, filters: CaseMixDto): Promise<any>;
    getInfectionRates(tenantId: string, filters: InfectionRateDto): Promise<any>;
    getReadmissionsAnalysis(tenantId: string, filters: ReadmissionDto): Promise<any>;
    getTurnaroundTimes(tenantId: string, filters: TATDto): Promise<any>;
    getOccupancyReport(tenantId: string, filters: OccupancyDto): Promise<any>;
    getLengthOfStayAnalysis(tenantId: string, filters: LOSDto): Promise<any>;
    getBedTurnoverAnalysis(tenantId: string, filters: BedTurnoverDto): Promise<any>;
    getPharmacyExpiryReport(tenantId: string, filters: PharmacyExpiryDto): Promise<any>;
    getPatientAcquisition(tenantId: string, filters: PatientAcquisitionDto): Promise<any>;
    getPatientRetention(tenantId: string, filters: PatientRetentionDto): Promise<any>;
    getNPSAnalysis(tenantId: string, filters: NPSDto): Promise<any>;
    getReferralSourcesAnalysis(tenantId: string, filters: ReferralAnalysisDto): Promise<any>;
    getAnalyticsSummary(tenantId: string, options: {
        dateRange?: string;
        metrics?: string[];
    }): Promise<any>;
    private getRevenueSummary;
    private getCollectionsSummary;
    private getPatientVisitsSummary;
    private getLabTestsSummary;
    private getOccupancySummary;
    getTrendAnalysis(tenantId: string, metric: string, period: string, groupBy: string): Promise<any>;
    getKPIDashboard(tenantId: string, category?: string): Promise<any>;
}
