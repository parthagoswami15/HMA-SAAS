import { Repository } from 'typeorm';
import { ReportConfig, ReportSchedule, SavedReport } from '../entities/reports.entity';
import { DimDate, DimFacility, DimProvider, DimService, DimPayer } from '../entities/dimensions.entity';
import { FactBilling, FactVisits, FactLabs } from '../entities/facts.entity';
import { CreateReportDto, UpdateReportDto, ReportScheduleDto } from '../dto/reports.dto';
export declare class ReportsService {
    private readonly reportConfigRepo;
    private readonly reportScheduleRepo;
    private readonly savedReportRepo;
    private readonly dimDateRepo;
    private readonly dimFacilityRepo;
    private readonly dimProviderRepo;
    private readonly dimServiceRepo;
    private readonly dimPayerRepo;
    private readonly factBillingRepo;
    private readonly factVisitsRepo;
    private readonly factLabsRepo;
    private readonly logger;
    constructor(reportConfigRepo: Repository<ReportConfig>, reportScheduleRepo: Repository<ReportSchedule>, savedReportRepo: Repository<SavedReport>, dimDateRepo: Repository<DimDate>, dimFacilityRepo: Repository<DimFacility>, dimProviderRepo: Repository<DimProvider>, dimServiceRepo: Repository<DimService>, dimPayerRepo: Repository<DimPayer>, factBillingRepo: Repository<FactBilling>, factVisitsRepo: Repository<FactVisits>, factLabsRepo: Repository<FactLabs>);
    createReport(tenantId: string, userId: string, createReportDto: CreateReportDto): Promise<ReportConfig>;
    getReports(tenantId: string, options: {
        category?: string;
        type?: string;
        search?: string;
        page: number;
        limit: number;
    }): Promise<{
        reports: ReportConfig[];
        total: number;
        page: number;
        limit: number;
    }>;
    getReportById(tenantId: string, id: string): Promise<ReportConfig>;
    updateReport(tenantId: string, id: string, userId: string, updateReportDto: UpdateReportDto): Promise<ReportConfig>;
    deleteReport(tenantId: string, id: string): Promise<void>;
    executeReport(tenantId: string, reportId: string, filters: Record<string, any>): Promise<any>;
    private executeReportQuery;
    private executeBillingQuery;
    private executeVisitsQuery;
    private executeLabsQuery;
    private executePatientsQuery;
    private executeStaffQuery;
    private executeInventoryQuery;
    private buildSelectFields;
    private saveReportExecution;
    scheduleReport(tenantId: string, reportId: string, userId: string, scheduleDto: ReportScheduleDto): Promise<ReportSchedule>;
    getReportSchedules(tenantId: string, reportId: string): Promise<ReportSchedule[]>;
    deleteSchedule(tenantId: string, scheduleId: string): Promise<void>;
    private calculateNextRunAt;
    getReportMetrics(tenantId: string): Promise<any>;
}
