import { StreamableFile } from '@nestjs/common';
import { ReportsService } from '../services/reports.service';
import { AnalyticsService } from '../services/analytics.service';
import { ExportService } from '../services/export.service';
import { DashboardService } from '../services/dashboard.service';
import { CreateReportDto, UpdateReportDto, ReportScheduleDto, CreateDashboardDto, UpdateDashboardDto, FinancialReportDto, ClinicalReportDto, OperationalReportDto, PatientReportDto, ExportRequestDto } from '../dto/reports.dto';
export declare class ReportsController {
    private readonly reportsService;
    private readonly analyticsService;
    private readonly exportService;
    private readonly dashboardService;
    constructor(reportsService: ReportsService, analyticsService: AnalyticsService, exportService: ExportService, dashboardService: DashboardService);
    createReport(createReportDto: CreateReportDto, req: any): Promise<import("../entities/reports.entity").ReportConfig>;
    getReports(query: any, req: any): Promise<{
        reports: import("../entities/reports.entity").ReportConfig[];
        total: number;
        page: number;
        limit: number;
    }>;
    getReport(id: string, req: any): Promise<import("../entities/reports.entity").ReportConfig>;
    updateReport(id: string, updateReportDto: UpdateReportDto, req: any): Promise<import("../entities/reports.entity").ReportConfig>;
    deleteReport(id: string, req: any): Promise<void>;
    executeReport(id: string, filters: Record<string, any>, req: any): Promise<any>;
    scheduleReport(id: string, scheduleDto: ReportScheduleDto, req: any): Promise<import("../entities/reports.entity").ReportSchedule>;
    getReportSchedules(id: string, req: any): Promise<import("../entities/reports.entity").ReportSchedule[]>;
    deleteSchedule(scheduleId: string, req: any): Promise<void>;
    getDailyCollections(query: FinancialReportDto, req: any): Promise<any>;
    getRevenueAnalysis(query: FinancialReportDto, req: any): Promise<any>;
    getGSTReport(query: FinancialReportDto, req: any): Promise<any>;
    getAgingAnalysis(query: FinancialReportDto, req: any): Promise<any>;
    getCaseMix(query: ClinicalReportDto, req: any): Promise<any>;
    getInfectionRates(query: ClinicalReportDto, req: any): Promise<any>;
    getReadmissions(query: ClinicalReportDto, req: any): Promise<any>;
    getTurnaroundTimes(query: ClinicalReportDto, req: any): Promise<any>;
    getOccupancy(query: OperationalReportDto, req: any): Promise<any>;
    getLengthOfStay(query: OperationalReportDto, req: any): Promise<any>;
    getBedTurnover(query: OperationalReportDto, req: any): Promise<any>;
    getPharmacyExpiry(query: OperationalReportDto, req: any): Promise<any>;
    getPatientAcquisition(query: PatientReportDto, req: any): Promise<any>;
    getPatientRetention(query: PatientReportDto, req: any): Promise<any>;
    getNPS(query: PatientReportDto, req: any): Promise<any>;
    getReferralSources(query: PatientReportDto, req: any): Promise<any>;
    createDashboard(createDashboardDto: CreateDashboardDto, req: any): Promise<import("../entities/reports.entity").DashboardConfig>;
    getDashboards(query: any, req: any): Promise<{
        dashboards: import("../entities/reports.entity").DashboardConfig[];
        total: number;
        page: number;
        limit: number;
    }>;
    getDashboard(id: string, req: any): Promise<import("../entities/reports.entity").DashboardConfig>;
    updateDashboard(id: string, updateDashboardDto: UpdateDashboardDto, req: any): Promise<import("../entities/reports.entity").DashboardConfig>;
    deleteDashboard(id: string, req: any): Promise<void>;
    exportReport(exportRequest: ExportRequestDto, req: any): Promise<any>;
    downloadExport(exportId: string, req: any): Promise<StreamableFile>;
    getExportStatus(exportId: string, req: any): Promise<any>;
    getAnalyticsSummary(query: any, req: any): Promise<any>;
    getTrendAnalysis(query: any, req: any): Promise<any>;
    getKPIDashboard(query: any, req: any): Promise<any>;
}
