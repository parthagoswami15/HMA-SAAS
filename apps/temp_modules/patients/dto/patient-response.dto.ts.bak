import { ApiProperty } from '@nestjs/swagger';
import { Gender, BloodType, Patient } from '@prisma/client';

export class PatientResponseDto {
  constructor(patient: Patient & { tenant?: { id: string; name: string; slug: string } }) {
    this.id = patient.id;
    this.firstName = patient.firstName;
    this.lastName = patient.lastName;
    this.fullName = `${patient.firstName} ${patient.lastName}`.trim();
    this.dob = patient.dob;
    this.gender = patient.gender;
    this.phone = patient.phone;
    this.email = patient.email;
    this.address = patient.address;
    this.medicalRecordNumber = patient.medicalRecordNumber;
    this.bloodType = patient.bloodType;
    this.allergies = patient.allergies ? patient.allergies.split(',').map(a => a.trim()).filter(Boolean) : [];
    this.notes = patient.notes;
    this.isActive = patient.isActive;
    this.createdAt = patient.createdAt;
    this.updatedAt = patient.updatedAt;
    this.deletedAt = patient.deletedAt;
    this.tenant = patient.tenant;
    
    // Calculate age from DOB
    if (this.dob) {
      const birthDate = new Date(this.dob);
      const today = new Date();
      let age = today.getFullYear() - birthDate.getFullYear();
      const monthDiff = today.getMonth() - birthDate.getMonth();
      
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
      }
      this.age = age;
    }
  }

  @ApiProperty({ description: 'Unique identifier of the patient' })
  id: string;

  @ApiProperty({ description: 'First name of the patient' })
  firstName: string;

  @ApiProperty({ description: 'Last name of the patient' })
  lastName: string;

  @ApiProperty({ description: 'Full name of the patient (first + last name)' })
  fullName: string;
  
  @ApiProperty({ 
    description: 'Age of the patient (calculated from DOB)',
    required: false,
    nullable: true 
  })
  age?: number | null;
  
  @ApiProperty({ 
    description: 'Date of birth',
    example: '1990-01-01',
    required: false,
    nullable: true 
  })
  dob?: Date | null;

  @ApiProperty({
    enum: Gender,
    description: 'Gender of the patient',
    required: false,
    nullable: true
  })
  gender?: Gender | null;

  @ApiProperty({
    description: 'Phone number',
    example: '+1234567890',
    required: false,
    nullable: true
  })
  phone?: string | null;

  @ApiProperty({
    description: 'Email address',
    example: 'patient@example.com',
    required: false,
    nullable: true
  })
  email?: string | null;

  @ApiProperty({
    description: 'Physical address',
    required: false,
    nullable: true
  })
  address?: string | null;

  @ApiProperty({
    description: 'Medical record number',
    required: false,
    nullable: true
  })
  medicalRecordNumber?: string | null;

  @ApiProperty({
    enum: BloodType,
    description: 'Blood type',
    required: false,
    nullable: true
  })
  bloodType?: BloodType | null;

  @ApiProperty({
    description: 'List of allergies',
    type: [String],
    required: false,
    default: []
  })
  allergies: string[] = [];

  @ApiProperty({
    description: 'Additional notes',
    required: false,
    nullable: true
  })
  notes?: string | null;

  @ApiProperty({
    description: 'Whether the patient is active',
    default: true
  })
  isActive: boolean;

  @ApiProperty({
    description: 'Date when the patient was created',
    type: Date
  })
  createdAt: Date;

  @ApiProperty({
    description: 'Date when the patient was last updated',
    type: Date
  })
  updatedAt: Date;

  @ApiProperty({
    description: 'Date when the patient was deleted (soft delete)',
    type: Date,
    required: false,
    nullable: true
  })
  deletedAt?: Date | null;

  @ApiProperty({
    description: 'Tenant information',
    type: Object,
    required: false
  })
  tenant?: {
    id: string;
    name: string;
    slug: string;
  };

  @ApiProperty({ 
    description: 'Medical record number of the patient',
    example: 'MRN-1234567890'
  })
  medicalRecordNumber: string;

  @ApiProperty({ 
    description: 'Address of the patient',
    required: false,
    nullable: true
  })
  address?: string | null;

  @ApiProperty({ 
    description: 'City of residence',
    required: false,
    nullable: true
  })
  city?: string | null;

  @ApiProperty({ 
    description: 'State/Province/Region',
    required: false,
    nullable: true
  })
  state?: string | null;

  @ApiProperty({ 
    description: 'Postal/ZIP code',
    required: false,
    nullable: true
  })
  postalCode?: string | null;

  @ApiProperty({ 
    description: 'Country',
    required: false,
    nullable: true
  })
  country?: string | null;

  @ApiProperty({ 
    description: 'URL to the patient\'s profile picture',
    required: false,
    nullable: true
  })
  profilePicture?: string | null;

  @ApiProperty({ 
    description: 'Any additional notes about the patient',
    required: false,
    nullable: true
  })
  notes?: string | null;

  @ApiProperty({ 
    description: 'Whether the patient is active',
    default: true
  })
  isActive: boolean;

  @ApiProperty({ 
    description: 'Tenant ID that this patient belongs to',
    example: '550e8400-e29b-41d4-a716-446655440000'
  })
  tenantId: string;

  @ApiProperty({ 
    description: 'Date and time when the patient was created',
    type: Date
  })
  createdAt: Date;

  @ApiProperty({ 
    description: 'Date and time when the patient was last updated',
    type: Date
  })
  updatedAt: Date;

  @ApiProperty({ 
    description: 'Date and time when the patient was soft-deleted',
    type: Date,
    nullable: true
  })
  deletedAt: Date | null;

  constructor(patient: any) {
    this.id = patient.id;
    this.firstName = patient.firstName;
    this.lastName = patient.lastName;
    this.fullName = `${patient.firstName} ${patient.lastName}`.trim();
    this.dob = patient.dob ?? null;
    this.gender = patient.gender ?? null;
    this.email = patient.email ?? null;
    this.phone = patient.phone ?? null;
    this.bloodType = patient.bloodType ?? null;
    this.medicalRecordNumber = patient.medicalRecordNumber;
    this.address = patient.address ?? null;
    this.city = patient.city ?? null;
    this.state = patient.state ?? null;
    this.postalCode = patient.postalCode ?? null;
    this.country = patient.country ?? null;
    this.profilePicture = patient.profilePicture ?? null;
    this.notes = patient.notes ?? null;
    this.isActive = patient.isActive ?? true;
    this.tenantId = patient.tenantId;
    this.createdAt = patient.createdAt;
    this.updatedAt = patient.updatedAt;
    this.deletedAt = patient.deletedAt ?? null;
    
    // Calculate age from DOB if available
    if (this.dob) {
      const birthDate = new Date(this.dob);
      const today = new Date();
      let age = today.getFullYear() - birthDate.getFullYear();
      const monthDiff = today.getMonth() - birthDate.getMonth();
      
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
      }
      
      this.age = age;
    }
  }
}
