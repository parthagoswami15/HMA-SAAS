
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpecialtyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeId: 'employeeId',
  designation: 'designation',
  departmentId: 'departmentId',
  joiningDate: 'joiningDate',
  qualification: 'qualification',
  experience: 'experience',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  type: 'type',
  address: 'address',
  phone: 'phone',
  email: 'email',
  logo: 'logo',
  deletedAt: 'deletedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  specialization: 'specialization',
  experience: 'experience',
  licenseNumber: 'licenseNumber',
  signature: 'signature',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  deletedAt: 'deletedAt',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  jti: 'jti',
  token: 'token',
  userId: 'userId',
  revoked: 'revoked',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  medicalRecordNumber: 'medicalRecordNumber',
  registrationNumber: 'registrationNumber',
  externalId: 'externalId',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  bloodType: 'bloodType',
  maritalStatus: 'maritalStatus',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  pincode: 'pincode',
  phoneVerified: 'phoneVerified',
  emailVerified: 'emailVerified',
  allergies: 'allergies',
  chronicConditions: 'chronicConditions',
  currentMedications: 'currentMedications',
  knownAllergies: 'knownAllergies',
  familyHistory: 'familyHistory',
  insuranceProvider: 'insuranceProvider',
  insuranceId: 'insuranceId',
  insuranceGroup: 'insuranceGroup',
  insuranceValidUntil: 'insuranceValidUntil',
  insuranceType: 'insuranceType',
  tenantId: 'tenantId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  isActive: 'isActive',
  isVerified: 'isVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  departmentId: 'departmentId',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  reason: 'reason',
  notes: 'notes',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  diagnosis: 'diagnosis',
  notes: 'notes',
  status: 'status',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrescriptionItemScalarFieldEnum = {
  id: 'id',
  prescriptionId: 'prescriptionId',
  medicationId: 'medicationId',
  patientId: 'patientId',
  dosage: 'dosage',
  frequency: 'frequency',
  duration: 'duration',
  instructions: 'instructions',
  isDispensed: 'isDispensed',
  tenantId: 'tenantId'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  recordType: 'recordType',
  title: 'title',
  description: 'description',
  date: 'date',
  doctorId: 'doctorId',
  updatedById: 'updatedById',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  patientId: 'patientId',
  date: 'date',
  dueDate: 'dueDate',
  status: 'status',
  subTotal: 'subTotal',
  taxAmount: 'taxAmount',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  notes: 'notes',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  itemType: 'itemType',
  itemId: 'itemId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  discount: 'discount',
  taxRate: 'taxRate',
  totalAmount: 'totalAmount',
  tenantId: 'tenantId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentNumber: 'paymentNumber',
  invoiceId: 'invoiceId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  referenceNumber: 'referenceNumber',
  notes: 'notes',
  status: 'status',
  tenantId: 'tenantId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabTestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  category: 'category',
  price: 'price',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  patientId: 'patientId',
  doctorId: 'doctorId',
  status: 'status',
  orderDate: 'orderDate',
  completedDate: 'completedDate',
  notes: 'notes',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  consultationId: 'consultationId'
};

exports.Prisma.LabOrderTestScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  testId: 'testId',
  status: 'status',
  result: 'result',
  resultDate: 'resultDate',
  referenceRange: 'referenceRange',
  notes: 'notes',
  tenantId: 'tenantId'
};

exports.Prisma.MedicationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  genericName: 'genericName',
  description: 'description',
  strength: 'strength',
  unit: 'unit',
  dosageForm: 'dosageForm',
  route: 'route',
  schedule: 'schedule',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PharmacyOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  patientId: 'patientId',
  doctorId: 'doctorId',
  status: 'status',
  orderDate: 'orderDate',
  dispensedDate: 'dispensedDate',
  notes: 'notes',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  invoiceId: 'invoiceId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.PharmacyOrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  medicationId: 'medicationId',
  quantity: 'quantity',
  dosage: 'dosage',
  frequency: 'frequency',
  duration: 'duration',
  instructions: 'instructions',
  status: 'status',
  tenantId: 'tenantId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  tenantId: 'tenantId',
  createdAt: 'createdAt'
};

exports.Prisma.ModalityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudyScalarFieldEnum = {
  id: 'id',
  studyId: 'studyId',
  patientId: 'patientId',
  patientName: 'patientName',
  modalityId: 'modalityId',
  status: 'status',
  studyDate: 'studyDate',
  priority: 'priority',
  description: 'description',
  notes: 'notes',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeriesScalarFieldEnum = {
  id: 'id',
  seriesUid: 'seriesUid',
  studyId: 'studyId',
  number: 'number',
  description: 'description',
  modality: 'modality',
  bodyPart: 'bodyPart',
  count: 'count',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  sopInstanceUid: 'sopInstanceUid',
  seriesId: 'seriesId',
  number: 'number',
  path: 'path',
  size: 'size',
  contentType: 'contentType',
  width: 'width',
  height: 'height',
  windowCenter: 'windowCenter',
  windowWidth: 'windowWidth',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RadReportScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  studyId: 'studyId',
  reportTemplateId: 'reportTemplateId',
  status: 'status',
  findings: 'findings',
  impression: 'impression',
  conclusion: 'conclusion',
  reportDateTime: 'reportDateTime',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RadiationDoseScalarFieldEnum = {
  id: 'id',
  studyId: 'studyId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  exposureTime: 'exposureTime',
  kvp: 'kvp',
  ma: 'ma',
  doseAreaProduct: 'doseAreaProduct',
  doseLengthProduct: 'doseLengthProduct',
  ctdiVol: 'ctdiVol',
  dlp: 'dlp',
  effectiveDose: 'effectiveDose',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  template: 'template',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TelemedicineConsultationScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  status: 'status',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  duration: 'duration',
  consultationType: 'consultationType',
  reason: 'reason',
  notes: 'notes',
  prescription: 'prescription',
  followUpRequired: 'followUpRequired',
  followUpDate: 'followUpDate',
  isEmergency: 'isEmergency',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoRoomScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  roomId: 'roomId',
  status: 'status',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  maxParticipants: 'maxParticipants',
  recordingEnabled: 'recordingEnabled',
  recordingUrl: 'recordingUrl',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoParticipantScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  participantType: 'participantType',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoRecordingScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  duration: 'duration',
  status: 'status',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoMessageScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  senderId: 'senderId',
  message: 'message',
  messageType: 'messageType',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RadiologyOrderScalarFieldEnum = {
  id: 'id',
  consultationId: 'consultationId',
  patientId: 'patientId',
  doctorId: 'doctorId',
  modalityId: 'modalityId',
  studyType: 'studyType',
  priority: 'priority',
  reason: 'reason',
  clinicalHistory: 'clinicalHistory',
  status: 'status',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  isActive: 'isActive',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  studyId: 'studyId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.TenantType = exports.$Enums.TenantType = {
  HOSPITAL: 'HOSPITAL',
  CLINIC: 'CLINIC',
  LAB: 'LAB',
  PHARMACY: 'PHARMACY',
  CHAMBER: 'CHAMBER',
  MULTI_SPECIALTY: 'MULTI_SPECIALTY'
};

exports.Role = exports.$Enums.Role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  LAB_TECHNICIAN: 'LAB_TECHNICIAN',
  RADIOLOGIST: 'RADIOLOGIST',
  PHARMACIST: 'PHARMACIST',
  RECEPTIONIST: 'RECEPTIONIST',
  ACCOUNTANT: 'ACCOUNTANT',
  PATIENT: 'PATIENT',
  USER: 'USER',
  HOSPITAL_ADMIN: 'HOSPITAL_ADMIN'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  UNKNOWN: 'UNKNOWN'
};

exports.BloodType = exports.$Enums.BloodType = {
  A_POSITIVE: 'A_POSITIVE',
  A_NEGATIVE: 'A_NEGATIVE',
  B_POSITIVE: 'B_POSITIVE',
  B_NEGATIVE: 'B_NEGATIVE',
  AB_POSITIVE: 'AB_POSITIVE',
  AB_NEGATIVE: 'AB_NEGATIVE',
  O_POSITIVE: 'O_POSITIVE',
  O_NEGATIVE: 'O_NEGATIVE',
  UNKNOWN: 'UNKNOWN'
};

exports.MaritalStatus = exports.$Enums.MaritalStatus = {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  DIVORCED: 'DIVORCED',
  WIDOWED: 'WIDOWED',
  SEPARATED: 'SEPARATED',
  DOMESTIC_PARTNERSHIP: 'DOMESTIC_PARTNERSHIP',
  UNKNOWN: 'UNKNOWN'
};

exports.InsuranceType = exports.$Enums.InsuranceType = {
  PRIVATE_INSURANCE: 'PRIVATE_INSURANCE',
  GOVERNMENT_INSURANCE: 'GOVERNMENT_INSURANCE',
  CORPORATE_INSURANCE: 'CORPORATE_INSURANCE',
  FAMILY_INSURANCE: 'FAMILY_INSURANCE',
  INDIVIDUAL_INSURANCE: 'INDIVIDUAL_INSURANCE',
  MEDICARE: 'MEDICARE',
  MEDICAID: 'MEDICAID',
  OTHER: 'OTHER'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  ARRIVED: 'ARRIVED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW',
  RESCHEDULED: 'RESCHEDULED'
};

exports.PrescriptionStatus = exports.$Enums.PrescriptionStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  UPI: 'UPI',
  NET_BANKING: 'NET_BANKING',
  CHEQUE: 'CHEQUE',
  BANK_TRANSFER: 'BANK_TRANSFER',
  WALLET: 'WALLET',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.LabOrderStatus = exports.$Enums.LabOrderStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

exports.LabTestStatus = exports.$Enums.LabTestStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

exports.PharmacyOrderStatus = exports.$Enums.PharmacyOrderStatus = {
  PENDING: 'PENDING',
  DISPENSED: 'DISPENSED',
  PARTIALLY_DISPENSED: 'PARTIALLY_DISPENSED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.PharmacyItemStatus = exports.$Enums.PharmacyItemStatus = {
  PENDING: 'PENDING',
  DISPENSED: 'DISPENSED',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  CANCELLED: 'CANCELLED'
};

exports.StudyStatus = exports.$Enums.StudyStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  DELETED: 'DELETED'
};

exports.Priority = exports.$Enums.Priority = {
  STAT: 'STAT',
  HIGH: 'HIGH',
  ROUTINE: 'ROUTINE',
  LOW: 'LOW'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  DRAFT: 'DRAFT',
  PRELIMINARY: 'PRELIMINARY',
  FINAL: 'FINAL',
  AMENDED: 'AMENDED',
  CANCELLED: 'CANCELLED'
};

exports.TelemedicineStatus = exports.$Enums.TelemedicineStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW',
  RESCHEDULED: 'RESCHEDULED'
};

exports.ConsultationType = exports.$Enums.ConsultationType = {
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  CHAT: 'CHAT',
  MIXED: 'MIXED'
};

exports.VideoRoomStatus = exports.$Enums.VideoRoomStatus = {
  WAITING: 'WAITING',
  ACTIVE: 'ACTIVE',
  ENDED: 'ENDED',
  CANCELLED: 'CANCELLED'
};

exports.ParticipantType = exports.$Enums.ParticipantType = {
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT',
  OBSERVER: 'OBSERVER',
  SUPPORT: 'SUPPORT'
};

exports.RecordingStatus = exports.$Enums.RecordingStatus = {
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  SYSTEM: 'SYSTEM'
};

exports.RadiologyOrderStatus = exports.$Enums.RadiologyOrderStatus = {
  ORDERED: 'ORDERED',
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  Department: 'Department',
  Specialty: 'Specialty',
  Staff: 'Staff',
  Tenant: 'Tenant',
  User: 'User',
  RefreshToken: 'RefreshToken',
  Patient: 'Patient',
  Appointment: 'Appointment',
  Prescription: 'Prescription',
  PrescriptionItem: 'PrescriptionItem',
  MedicalRecord: 'MedicalRecord',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Payment: 'Payment',
  LabTest: 'LabTest',
  LabOrder: 'LabOrder',
  LabOrderTest: 'LabOrderTest',
  Medication: 'Medication',
  PharmacyOrder: 'PharmacyOrder',
  PharmacyOrderItem: 'PharmacyOrderItem',
  AuditLog: 'AuditLog',
  Modality: 'Modality',
  Study: 'Study',
  Series: 'Series',
  Image: 'Image',
  RadReport: 'RadReport',
  RadiationDose: 'RadiationDose',
  ReportTemplate: 'ReportTemplate',
  TelemedicineConsultation: 'TelemedicineConsultation',
  VideoRoom: 'VideoRoom',
  VideoParticipant: 'VideoParticipant',
  VideoRecording: 'VideoRecording',
  VideoMessage: 'VideoMessage',
  RadiologyOrder: 'RadiologyOrder'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
