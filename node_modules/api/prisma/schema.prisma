generator client {
  provider = "prisma-client-js"
}
enum Role {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  NURSE
  LAB_TECHNICIAN
  RADIOLOGIST
  PHARMACIST
  RECEPTIONIST
  ACCOUNTANT
  PATIENT
  USER
  HOSPITAL_ADMIN
}

enum TenantType {
  HOSPITAL
  CLINIC
  LAB
  PHARMACY
  CHAMBER
  MULTI_SPECIALTY
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Department {
  id           String        @id @default(cuid())
  name         String
  code         String?       @unique
  description  String?
  isActive     Boolean       @default(true)
  tenantId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  staff        Staff[]

  @@index([name])
  @@index([isActive])
}

model Specialty {
  id          String   @id @default(cuid())
  name        String
  code        String?  @unique
  description String?
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([name])
  @@index([isActive])
}

model Staff {
  id            String      @id @default(cuid())
  userId        String      @unique
  employeeId    String?     @unique
  designation   String?
  departmentId  String?
  joiningDate   DateTime?
  qualification String?
  experience    String?
  isActive      Boolean     @default(true)
  tenantId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  department    Department? @relation(fields: [departmentId], references: [id])
  user          User        @relation("UserStaff", fields: [userId], references: [id])

  @@index([userId])
  @@index([employeeId])
  @@index([departmentId])
  @@index([isActive])
}

model Tenant {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  type               TenantType          @default(HOSPITAL)
  address            String?
  phone              String?
  email              String?
  logo               String?
  deletedAt          DateTime?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  auditLogs          AuditLog[]
  departments        Department[]
  invoices           Invoice[]
  invoiceItems       InvoiceItem[]
  labOrders          LabOrder[]
  labOrderTests      LabOrderTest[]
  labTests           LabTest[]
  medicalRecords     MedicalRecord[]
  medications        Medication[]
  payments           Payment[]
  pharmacyOrders     PharmacyOrder[]
  pharmacyOrderItems PharmacyOrderItem[]
  prescriptions      Prescription[]
  prescriptionItems  PrescriptionItem[]
  refreshTokens      RefreshToken[]
  specialties        Specialty[]
  staff              Staff[]
  users              User[]
  patients           Patient[]
  studies            Study[]
  radReports         RadReport[]
  reportTemplates    ReportTemplate[]
  telemedicineConsultations TelemedicineConsultation[]
  videoRooms         VideoRoom[]
  videoParticipants  VideoParticipant[]
  videoRecordings    VideoRecording[]
  videoMessages      VideoMessage[]
  radiologyOrders    RadiologyOrder[]

  @@index([slug])
}

model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  passwordHash          String
  firstName             String
  lastName              String
  role                  Role
  specialization        String?
  experience            Int?            @default(0)
  licenseNumber         String?
  signature             String?
  isActive              Boolean         @default(true)
  lastLoginAt           DateTime?
  deletedAt             DateTime?
  tenantId              String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  // Relations
  doctorAppointments    Appointment[]   @relation("DoctorAppointments")
  doctorLabOrders       LabOrder[]      @relation("DoctorLabOrders")
  doctorPrescriptions   PharmacyOrder[] @relation("DoctorPrescriptions")
  prescriptions         Prescription[]  @relation("DoctorPrescriptions")
  doctorTelemedicine    TelemedicineConsultation[] @relation("DoctorTelemedicine")
  doctorRadiologyOrders RadiologyOrder[] @relation("DoctorRadiologyOrders")
  refreshTokens         RefreshToken[]
  staff                 Staff?          @relation("UserStaff")
  auditLogs             AuditLog[]
  createdMedicalRecords MedicalRecord[] @relation("DoctorMedicalRecords")
  updatedMedicalRecords MedicalRecord[] @relation("DoctorUpdatedMedicalRecords")
  tenant                Tenant          @relation(fields: [tenantId], references: [id])

  @@index([email])
  @@index([role])
  @@index([tenantId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  token     String
  userId    String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([userId])
  @@index([token])
}

model Patient {
  id                  String             @id @default(cuid())
  medicalRecordNumber String             @unique
  registrationNumber  String?            @unique
  externalId          String?            @unique
  firstName           String
  middleName          String?
  lastName            String
  dateOfBirth         DateTime?
  gender              Gender?
  bloodType           BloodType?
  maritalStatus       MaritalStatus?
  email               String?            @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  country             String?            @default("India")
  pincode             String?
  phoneVerified       Boolean            @default(false)
  emailVerified       Boolean            @default(false)
  allergies           Json?
  chronicConditions   Json?
  currentMedications  Json?
  knownAllergies      Json?
  familyHistory       Json?
  insuranceProvider   String?
  insuranceId         String?
  insuranceGroup      String?
  insuranceValidUntil DateTime?
  insuranceType       InsuranceType?
  tenantId            String
  createdBy           String?
  updatedBy           String?
  isActive            Boolean            @default(true)
  isVerified          Boolean            @default(false)
  lastLoginAt         DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  deletedAt           DateTime?
  appointments        Appointment[]
  invoices            Invoice[]
  labOrders           LabOrder[]
  medicalRecords      MedicalRecord[]
  pharmacyOrders      PharmacyOrder[]
  prescriptions       Prescription[]
  prescriptionItems   PrescriptionItem[]
  studies             Study[]
  telemedicineConsultations TelemedicineConsultation[]
  radiologyOrders     RadiologyOrder[]
  tenant              Tenant             @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([email])
  @@index([phone])
  @@index([isActive])
  @@index([lastName, firstName])
  @@index([createdAt])
  @@map("patients")
}

model Appointment {
  id           String            @id @default(cuid())
  patientId    String
  doctorId     String
  departmentId String?
  startTime    DateTime
  endTime      DateTime
  status       AppointmentStatus
  reason       String?
  notes        String?
  tenantId     String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  tenant       Tenant            @relation(fields: [tenantId], references: [id])
  department   Department?       @relation(fields: [departmentId], references: [id])
  doctor       User              @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient      Patient           @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([doctorId])
  @@index([departmentId])
  @@index([status])
  @@index([startTime])
  @@index([endTime])
}

model Prescription {
  id                String             @id @default(cuid())
  patientId         String
  doctorId          String
  diagnosis         String?
  notes             String?
  status            PrescriptionStatus @default(ACTIVE)
  tenantId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  doctor            User               @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  patient           Patient            @relation(fields: [patientId], references: [id])
  prescriptionItems PrescriptionItem[]

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([createdAt])
}

model PrescriptionItem {
  id             String       @id @default(cuid())
  prescriptionId String
  medicationId   String
  patientId      String
  dosage         String
  frequency      String
  duration       String
  instructions   String?
  isDispensed    Boolean      @default(false)
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id])
  patient        Patient      @relation(fields: [patientId], references: [id])
  medication     Medication   @relation(fields: [medicationId], references: [id])
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])

  @@index([prescriptionId])
  @@index([medicationId])
  @@index([isDispensed])
}

model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  recordType  String
  title       String
  description String?
  date        DateTime @default(now())
  doctorId    String?
  updatedById String?
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  patient     Patient  @relation(fields: [patientId], references: [id])
  doctor      User?    @relation("DoctorMedicalRecords", fields: [doctorId], references: [id])
  updatedBy   User?    @relation("DoctorUpdatedMedicalRecords", fields: [updatedById], references: [id])

  @@index([patientId])
  @@index([recordType])
  @@index([date])
}

model Invoice {
  id             String         @id @default(cuid())
  invoiceNumber  String         @unique
  patientId      String
  date           DateTime       @default(now())
  dueDate        DateTime
  status         InvoiceStatus  @default(PENDING)
  subTotal       Float          @default(0)
  taxAmount      Float          @default(0)
  discountAmount Float          @default(0)
  totalAmount    Float          @default(0)
  notes          String?
  tenantId       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tenant         Tenant         @relation(fields: [tenantId], references: [id])
  patient        Patient        @relation(fields: [patientId], references: [id])
  invoiceItems   InvoiceItem[]
  payments       Payment[]
  createdBy      String?
  updatedBy      String?
  pharmacyOrder  PharmacyOrder?

  @@index([patientId])
  @@index([status])
  @@index([date])
  @@index([dueDate])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  itemType    String
  itemId      String
  description String
  quantity    Int     @default(1)
  unitPrice   Float
  discount    Float   @default(0)
  taxRate     Float   @default(0)
  totalAmount Float
  tenantId    String
  tenant      Tenant  @relation(fields: [tenantId], references: [id])
  invoice     Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
  @@index([itemType, itemId])
}

model Payment {
  id              String        @id @default(cuid())
  paymentNumber   String        @unique
  invoiceId       String
  amount          Float
  paymentDate     DateTime      @default(now())
  paymentMethod   PaymentMethod
  referenceNumber String?
  notes           String?
  status          PaymentStatus @default(COMPLETED)
  tenantId        String
  createdBy       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  invoice         Invoice       @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
  @@index([paymentDate])
  @@index([status])
}

model LabTest {
  id          String         @id @default(cuid())
  name        String
  code        String         @unique
  description String?
  category    String
  price       Float?
  isActive    Boolean        @default(true)
  tenantId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  labOrders   LabOrderTest[]
  tenant      Tenant         @relation(fields: [tenantId], references: [id])

  @@index([code])
  @@index([category])
  @@index([isActive])
}

model LabOrder {
  id            String         @id @default(cuid())
  orderNumber   String         @unique
  patientId     String
  doctorId      String?
  status        LabOrderStatus @default(PENDING)
  orderDate     DateTime       @default(now())
  completedDate DateTime?
  notes         String?
  tenantId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  doctor        User?          @relation("DoctorLabOrders", fields: [doctorId], references: [id])
  patient       Patient        @relation(fields: [patientId], references: [id])
  tests         LabOrderTest[]
  consultation  TelemedicineConsultation? @relation(fields: [consultationId], references: [id])
  consultationId String?

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([orderDate])
}

model LabOrderTest {
  id             String        @id @default(cuid())
  orderId        String
  testId         String
  status         LabTestStatus @default(PENDING)
  result         String?
  resultDate     DateTime?
  referenceRange String?
  notes          String?
  tenantId       String
  tenant         Tenant        @relation(fields: [tenantId], references: [id])
  test           LabTest       @relation(fields: [testId], references: [id])
  order          LabOrder      @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([testId])
  @@index([status])
  @@index([tenantId])
}

model Medication {
  id                 String              @id @default(cuid())
  name               String
  genericName        String?
  description        String?
  strength           String?
  unit               String?
  dosageForm         String?
  route              String?
  schedule           Json?
  isActive           Boolean             @default(true)
  tenantId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  pharmacyOrderItems PharmacyOrderItem[]
  prescriptionItems  PrescriptionItem[]

  @@index([name])
  @@index([genericName])
  @@index([isActive])
}

model PharmacyOrder {
  id            String              @id @default(cuid())
  orderNumber   String              @unique
  patientId     String
  doctorId      String?
  status        PharmacyOrderStatus @default(PENDING)
  orderDate     DateTime            @default(now())
  dispensedDate DateTime?
  notes         String?
  tenantId      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  invoiceId     String?
  createdBy     String?
  updatedBy     String?
  tenant        Tenant              @relation(fields: [tenantId], references: [id])
  doctor        User?               @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  patient       Patient             @relation(fields: [patientId], references: [id])
  invoice       Invoice?            @relation(fields: [invoiceId], references: [id])
  items         PharmacyOrderItem[]

  @@unique([invoiceId])
  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([orderDate])
}

model PharmacyOrderItem {
  id           String             @id @default(cuid())
  orderId      String
  medicationId String
  quantity     Int                @default(1)
  dosage       String?
  frequency    String?
  duration     String?
  instructions String?
  status       PharmacyItemStatus @default(PENDING)
  tenantId     String
  tenant       Tenant             @relation(fields: [tenantId], references: [id])
  medication   Medication         @relation(fields: [medicationId], references: [id])
  order        PharmacyOrder      @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([medicationId])
  @@index([status])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String?
  entityId   String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  tenantId   String
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}



enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  DOMESTIC_PARTNERSHIP
  UNKNOWN
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  UNKNOWN
}

enum LabOrderStatus {
  DRAFT
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum LabTestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum RegistrationType {
  WALK_IN
  ONLINE
  TRANSFER
  OTHER
}

enum InsuranceType {
  PRIVATE_INSURANCE
  GOVERNMENT_INSURANCE
  CORPORATE_INSURANCE
  FAMILY_INSURANCE
  INDIVIDUAL_INSURANCE
  MEDICARE
  MEDICAID
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  PARTIALLY_PAID
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  CHEQUE
  BANK_TRANSFER
  WALLET
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PharmacyOrderStatus {
  PENDING
  DISPENSED
  PARTIALLY_DISPENSED
  CANCELLED
  COMPLETED
}

enum PharmacyItemStatus {
  PENDING
  DISPENSED
  OUT_OF_STOCK
  CANCELLED
}

// ============================================
// RADIOLOGY MODELS
// ============================================

model Modality {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studies     Study[]
  radiologyOrders RadiologyOrder[]

  @@index([name])
  @@index([isActive])
}

model Study {
  id          String      @id @default(cuid())
  studyId     String      @unique
  patientId   String
  patientName String
  modalityId  String
  status      StudyStatus @default(SCHEDULED)
  studyDate   DateTime    @default(now())
  priority    Priority?   @default(ROUTINE)
  description String?
  notes       String?
  isActive    Boolean     @default(true)
  tenantId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  modality       Modality        @relation(fields: [modalityId], references: [id])
  patient        Patient         @relation(fields: [patientId], references: [id])
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  series         Series[]
  radReports     RadReport[]
  radiationDoses RadiationDose[]
  radiologyOrders RadiologyOrder[]

  @@index([studyId])
  @@index([patientId])
  @@index([modalityId])
  @@index([studyDate])
  @@index([status])
  @@index([isActive])
}

model Series {
  id          String   @id @default(cuid())
  seriesUid   String   @unique
  studyId     String
  number      Int
  description String?
  modality    String
  bodyPart    String?
  count       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  study  Study   @relation(fields: [studyId], references: [id])
  images Image[]

  @@index([seriesUid])
  @@index([studyId])
  @@index([modality])
  @@index([isActive])
}

model Image {
  id             String   @id @default(cuid())
  sopInstanceUid String   @unique
  seriesId       String
  number         Int
  path           String
  size           Int
  contentType    String
  width          Int
  height         Int
  windowCenter   Float?
  windowWidth    Float?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  series Series @relation(fields: [seriesId], references: [id])

  @@index([sopInstanceUid])
  @@index([seriesId])
  @@index([isActive])
}

model RadReport {
  id               String       @id @default(cuid())
  reportId         String       @unique
  studyId          String
  reportTemplateId String?
  status           ReportStatus @default(DRAFT)
  findings         String?
  impression       String?
  conclusion       String?
  reportDateTime   DateTime     @default(now())
  verifiedBy       String?
  verifiedAt       DateTime?
  isActive         Boolean      @default(true)
  tenantId         String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  study          Study           @relation(fields: [studyId], references: [id])
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  reportTemplate ReportTemplate? @relation(fields: [reportTemplateId], references: [id])

  @@index([reportId])
  @@index([studyId])
  @@index([status])
  @@index([isActive])
}

model RadiationDose {
  id                String   @id @default(cuid())
  studyId           String
  deviceName        String?
  deviceType        String?
  exposureTime      Float?
  kvp               Float?
  ma                Float?
  doseAreaProduct   Float?
  doseLengthProduct Float?
  ctdiVol           Float?
  dlp               Float?
  effectiveDose     Float?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  study Study @relation(fields: [studyId], references: [id])

  @@index([studyId])
  @@index([isActive])
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  template    String
  isActive    Boolean  @default(true)
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant     Tenant      @relation(fields: [tenantId], references: [id])
  radReports RadReport[]

  @@index([name])
  @@index([isActive])
}

// Add Radiology enums
enum StudyStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELETED
}

enum ReportStatus {
  DRAFT
  PRELIMINARY
  FINAL
  AMENDED
  CANCELLED
}

enum Priority {
  STAT
  HIGH
  ROUTINE
  LOW
}

// ============================================
// TELEMEDICINE MODELS
// ============================================

model TelemedicineConsultation {
  id                    String                    @id @default(cuid())
  patientId             String
  doctorId              String?
  status                TelemedicineStatus        @default(SCHEDULED)
  scheduledAt           DateTime
  startedAt             DateTime?
  endedAt               DateTime?
  duration              Int?                      // in minutes
  consultationType      ConsultationType          @default(VIDEO)
  reason                String?
  notes                 String?
  prescription          String?
  followUpRequired      Boolean                   @default(false)
  followUpDate          DateTime?
  isEmergency           Boolean                   @default(false)
  isActive              Boolean                   @default(true)
  tenantId              String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  patient               Patient                   @relation(fields: [patientId], references: [id])
  doctor                User?                     @relation("DoctorTelemedicine", fields: [doctorId], references: [id])
  tenant                Tenant                    @relation(fields: [tenantId], references: [id])
  videoRoom             VideoRoom?
  labOrders             LabOrder[]
  radiologyOrders       RadiologyOrder[]

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([scheduledAt])
  @@index([isEmergency])
}

model VideoRoom {
  id                    String                    @id @default(cuid())
  consultationId        String                    @unique
  roomId                String                    @unique
  status                VideoRoomStatus           @default(WAITING)
  startedAt             DateTime?
  endedAt               DateTime?
  maxParticipants       Int                       @default(2)
  recordingEnabled      Boolean                   @default(false)
  recordingUrl          String?
  isActive              Boolean                   @default(true)
  tenantId              String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  consultation          TelemedicineConsultation  @relation(fields: [consultationId], references: [id])
  tenant                Tenant                    @relation(fields: [tenantId], references: [id])
  participants          VideoParticipant[]
  recordings            VideoRecording[]

  @@index([roomId])
  @@index([status])
}

model VideoParticipant {
  id                    String                    @id @default(cuid())
  roomId                String
  userId                String
  participantType       ParticipantType
  joinedAt              DateTime?
  leftAt                DateTime?
  isActive              Boolean                   @default(true)
  tenantId              String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  room                  VideoRoom                 @relation(fields: [roomId], references: [id])
  tenant                Tenant                    @relation(fields: [tenantId], references: [id])

  @@index([roomId])
  @@index([userId])
  @@unique([roomId, userId])
}

model VideoRecording {
  id                    String                    @id @default(cuid())
  roomId                String
  fileName              String
  filePath              String
  fileSize              Int
  duration              Int?                      // in seconds
  status                RecordingStatus           @default(PROCESSING)
  isActive              Boolean                   @default(true)
  tenantId              String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  room                  VideoRoom                 @relation(fields: [roomId], references: [id])
  tenant                Tenant                    @relation(fields: [tenantId], references: [id])

  @@index([roomId])
  @@index([status])
}

model VideoMessage {
  id                    String                    @id @default(cuid())
  roomId                String
  senderId              String
  message               String
  messageType           MessageType               @default(TEXT)
  isActive              Boolean                   @default(true)
  tenantId              String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  tenant                Tenant                    @relation(fields: [tenantId], references: [id])

  @@index([roomId])
  @@index([senderId])
}

model RadiologyOrder {
  id                    String                    @id @default(cuid())
  consultationId        String
  patientId             String
  doctorId              String
  modalityId            String
  studyType             String
  priority              Priority                  @default(ROUTINE)
  reason                String?
  clinicalHistory       String?
  status                RadiologyOrderStatus     @default(ORDERED)
  scheduledAt           DateTime?
  completedAt           DateTime?
  isActive              Boolean                   @default(true)
  tenantId              String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  consultation          TelemedicineConsultation  @relation(fields: [consultationId], references: [id])
  patient               Patient                   @relation(fields: [patientId], references: [id])
  doctor                User                      @relation("DoctorRadiologyOrders", fields: [doctorId], references: [id])
  modality              Modality                  @relation(fields: [modalityId], references: [id])
  tenant                Tenant                    @relation(fields: [tenantId], references: [id])
  study                 Study?                    @relation(fields: [studyId], references: [id])
  studyId               String?

  @@index([consultationId])
  @@index([patientId])
  @@index([doctorId])
  @@index([status])
}

// Telemedicine Enums
enum TelemedicineStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum ConsultationType {
  VIDEO
  AUDIO
  CHAT
  MIXED
}

enum VideoRoomStatus {
  WAITING
  ACTIVE
  ENDED
  CANCELLED
}

enum ParticipantType {
  DOCTOR
  PATIENT
  OBSERVER
  SUPPORT
}

enum RecordingStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum RadiologyOrderStatus {
  ORDERED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
