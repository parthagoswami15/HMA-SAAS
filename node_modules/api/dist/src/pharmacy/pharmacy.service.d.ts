import { PrismaService } from '../prisma/prisma.service';
import { CreateItemDto, UpdateItemDto, CreateBatchDto, UpdateBatchDto, CreateVendorDto, UpdateVendorDto, CreateGrnDto, UpdateGrnDto, CreateFormularyDto, UpdateFormularyDto, CreateFormularyItemDto, UpdateFormularyItemDto, CreateReorderRuleDto, UpdateReorderRuleDto, CreateRxFillDto, UpdateRxFillDto, CreateSaleDto, UpdateSaleDto, CreateReturnDto, UpdateReturnDto, CreateInventoryTxDto } from './dto/pharmacy.dto';
export declare class PharmacyService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    createItem(tenantId: string, data: CreateItemDto): Promise<any>;
    getItems(tenantId: string): Promise<any>;
    getItemById(tenantId: string, id: string): Promise<any>;
    updateItem(tenantId: string, id: string, data: UpdateItemDto): Promise<any>;
    deleteItem(tenantId: string, id: string): Promise<any>;
    createBatch(tenantId: string, data: CreateBatchDto): Promise<any>;
    getBatches(tenantId: string): Promise<any>;
    updateBatch(tenantId: string, id: string, data: UpdateBatchDto): Promise<any>;
    deleteBatch(tenantId: string, id: string): Promise<any>;
    createVendor(tenantId: string, data: CreateVendorDto): Promise<any>;
    getVendors(tenantId: string): Promise<any>;
    updateVendor(tenantId: string, id: string, data: UpdateVendorDto): Promise<any>;
    deleteVendor(tenantId: string, id: string): Promise<any>;
    createGrn(tenantId: string, data: CreateGrnDto): Promise<any>;
    getGrns(tenantId: string): Promise<any>;
    updateGrn(tenantId: string, id: string, data: UpdateGrnDto): Promise<any>;
    deleteGrn(tenantId: string, id: string): Promise<any>;
    createFormulary(tenantId: string, data: CreateFormularyDto): Promise<any>;
    getFormularies(tenantId: string): Promise<any>;
    updateFormulary(tenantId: string, id: string, data: UpdateFormularyDto): Promise<any>;
    deleteFormulary(tenantId: string, id: string): Promise<any>;
    addItemToFormulary(tenantId: string, data: CreateFormularyItemDto): Promise<any>;
    updateFormularyItem(tenantId: string, id: string, data: UpdateFormularyItemDto): Promise<any>;
    removeFromFormulary(tenantId: string, id: string): Promise<any>;
    createReorderRule(tenantId: string, data: CreateReorderRuleDto): Promise<any>;
    getReorderRules(tenantId: string): Promise<any>;
    updateReorderRule(tenantId: string, id: string, data: UpdateReorderRuleDto): Promise<any>;
    deleteReorderRule(tenantId: string, id: string): Promise<any>;
    createRxFill(tenantId: string, data: CreateRxFillDto): Promise<any>;
    getRxFills(tenantId: string): Promise<any>;
    updateRxFill(tenantId: string, id: string, data: UpdateRxFillDto): Promise<any>;
    deleteRxFill(tenantId: string, id: string): Promise<any>;
    createSale(tenantId: string, data: CreateSaleDto): Promise<any>;
    getSales(tenantId: string): Promise<any>;
    updateSale(tenantId: string, id: string, data: UpdateSaleDto): Promise<any>;
    deleteSale(tenantId: string, id: string): Promise<any>;
    createReturn(tenantId: string, data: CreateReturnDto): Promise<any>;
    getReturns(tenantId: string): Promise<any>;
    updateReturn(tenantId: string, id: string, data: UpdateReturnDto): Promise<any>;
    deleteReturn(tenantId: string, id: string): Promise<any>;
    createInventoryTx(tenantId: string, data: CreateInventoryTxDto): Promise<any>;
    getInventoryTx(tenantId: string): Promise<any>;
    processProcurement(tenantId: string, grnData: CreateGrnDto, batches: CreateBatchDto[]): Promise<any>;
    getStockAlerts(tenantId: string): Promise<any>;
    dispensePrescription(tenantId: string, prescriptionId: string, items: Array<{
        itemId: string;
        qty: number;
        batchId?: string;
    }>): Promise<any>;
    issueToIpd(tenantId: string, patientId: string, items: Array<{
        itemId: string;
        qty: number;
        batchId?: string;
    }>): Promise<any>;
}
