import { VisitService } from './services/visit.service';
import { EncounterService } from './services/encounter.service';
import { PrescriptionService } from './services/prescription.service';
import { QueueService } from './services/queue.service';
import { OrderService } from './services/order.service';
import { DocumentService } from './services/document.service';
import { BillingService } from './services/billing.service';
import { Icd10Service } from './services/icd10.service';
import { DiagnosisService } from './services/diagnosis.service';
import { VitalsService } from './services/vitals.service';
export declare class OPDService {
    private readonly visitService;
    private readonly encounterService;
    private readonly prescriptionService;
    private readonly queueService;
    private readonly orderService;
    private readonly documentService;
    private readonly billingService;
    private readonly icd10Service;
    private readonly diagnosisService;
    private readonly vitalsService;
    constructor(visitService: VisitService, encounterService: EncounterService, prescriptionService: PrescriptionService, queueService: QueueService, orderService: OrderService, documentService: DocumentService, billingService: BillingService, icd10Service: Icd10Service, diagnosisService: DiagnosisService, vitalsService: VitalsService);
    createVisit(createVisitDto: any): Promise<any>;
    deleteVisit(id: string): Promise<any>;
    updateEncounter(id: string, updateEncounterDto: any): Promise<any>;
    completeEncounter(id: string): Promise<any>;
    createPrescription(createPrescriptionDto: any): Promise<any>;
    getPrescriptionsByPatient(patientId: string): Promise<any>;
    getActivePrescriptions(patientId: string): Promise<any>;
    generateToken(generateTokenDto: any): Promise<any>;
    getCurrentToken(doctorId?: string): Promise<any>;
    callNextToken(doctorId: string): Promise<any>;
    createOrder(createOrderDto: any): Promise<any>;
    getOrdersByEncounter(encounterId: string): Promise<any>;
    uploadDocument(uploadDocumentDto: any, file: Express.Multer.File): Promise<any>;
    getPatientDocuments(patientId: string): Promise<any>;
    generateBill(encounterId: string): Promise<any>;
    processPayment(billId: string, paymentDetails: any): Promise<any>;
    searchIcd10Codes(query: string): Promise<PaginatedResult<import("./entities/icd10-code.entity").Icd10Code>>;
    createDiagnosis(createDiagnosisDto: any): Promise<any>;
    getPatientDiagnoses(patientId: string): Promise<any>;
    recordVitals(recordVitalsDto: any): Promise<any>;
    getPatientVitals(patientId: string): Promise<any>;
    getVisits(options: IPaginationOptions, filters?: {
        status?: string;
        patientId?: string;
        providerId?: string;
    }): Promise<Pagination<Visit>>;
    addToQueue(createQueueTokenDto: any): Promise<QueueToken>;
    getQueue(departmentId?: string): Promise<QueueToken[]>;
    callNextPatient(id: string, updateData: any): Promise<QueueToken>;
}
